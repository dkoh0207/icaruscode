#
# File:    maketriggerslidingwindow_icarus.fcl
# Purpose: Runs `icarus::trigger::SlidingWindowTrigger` module.
# Author:  Gianluca Petrillo (petrillo@slac.stanford.edu)
# Date:    January 7, 2020
#
# This is a top-level configuration that can be run directly.
# 
# Required inputs
# ----------------
# 
#  * discriminated (LVDS) signals (with threshold)
#

#include "services_common_icarus.fcl"
#include "rootoutput_icarus.fcl"
#include "trigger_icarus.fcl"

process_name: TrgSlideWindow


services: {
  
  # this provides: file service, random management (unused),
  #                Geometry, detector properties and clocks
  @table::icarus_common_services
  
  # currently unused (remove the line if they start mattering):
  LArPropertiesService:      @erase
  DetectorClocksService:     @erase
  DetectorPropertiesService: @erase
  
  TFileService:              @erase

} # services


physics: {
  
  producers: {
  
    trigslidewindow: {

      module_type: SlidingWindowTrigger

      TriggerGatesTag: "lvdsgates"

      Thresholds: @local::icarus_triggergate_basic.ChannelThresholds # from trigger_icarus.fcl

      WindowSize: 30

      # number of optical channel used as offset for sliding window [as WindowSize]
      Stride: 15

      # channels not included in the input
      MissingChannels: @local::icarus_trigger_channel_ignore

      # name of the category used for the output
      LogCategory: "SlidingWindowTrigger"

    } # trigslidewindow

  } # producers
  
  trigger: [ trigslidewindow ]
  output: [ rootoutput ]
  
  trigger_paths: [ trigger ]
  end_paths: [ output ]
  
} # physics


outputs: {
  
  rootoutput: @local::icarus_rootoutput # from rootoutput_icarus.fcl
  
} # outputs


#
# add debug output to its own file
#
services.message.destinations.SlidingWindowLog: {
  type:       file
  filename:  "SlidingWindowTrigger.log"
  threshold:  DEBUG
  categories: {
    SlidingWindowTrigger: { limit: -1 }
    default:              { limit: 0 }
  }
} # services.messages.destinations.SlidingWindowLog

